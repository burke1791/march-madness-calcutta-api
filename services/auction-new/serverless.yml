
service: calcutta-auction-service-v2

package:
  individually: true

plugins:
  - serverless-bundle

custom:
  stage: ${opt:stage, self:provider.stage}
  provider: ${file(../../common/config/provider.json)}

provider:
  name: aws
  runtime: nodejs12.x
  timeout: ${self:custom.provider.timeout}
  logRetentionInDays: ${self:custom.provider.logRetentionInDays}
  region: ${self:custom.provider.region}
  stage: ${self:custom.provider.stage}
  environment:
    AUCTION_TABLE: ${self:resources.Resources.AuctionTable.TableName}
    CONNECTION_TABLE: ${self:resources.Resources.AuctionConnectionTable.TableName}
    CHAT_TABLE: ${self:resources.Resources.AuctionChatTable.TableName}
    WEBSOCKET_ENDPOINT:
      Fn::Join:
        - ''
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:custom.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - Fn::ImportValue: calcutta-auction-connection-table-arn-${self:custom.stage}
        - Fn::ImportValue: calcutta-auction-chat-table-arn-${self:custom.stage}
        - Fn::ImportValue: calcutta-auction-table-arn-${self:custom.stage}

functions:
  # websocket functions
  onConnect:
    handler: functions/websocket.onConnect
    # role:
    #   Fn::GetAtt: [DynamoDBWebsocketRole, Arn]
    events:
      - websocket:
          route: $connect
  onDisconnect:
    handler: functions/websocket.onDisconnect
    # role:
    #   Fn::GetAtt: [DynamoDBWebsocketRole, Arn]
    events:
      - websocket:
          route: $disconnect

resources:
  # - ${file(../../common/resources/api-gateway-authorizer.yml)}