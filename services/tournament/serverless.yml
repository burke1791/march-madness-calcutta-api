
service: calcutta-tournament-service
projectDir: ../../

package:
  individually: true

plugins:
  - serverless-bundle

custom:
  stage: ${opt:stage, self:provider.stage}
  provider: ${file(../../common/config/provider.json)}

provider:
  name: aws
  runtime: ${self:custom.provider.runtime}
  timeout: ${self:custom.provider.timeout}
  logRetentionInDays: ${self:custom.provider.logRetentionInDays}
  region: ${self:custom.provider.region}
  stage: ${self:custom.stage}
  environment:
    DB_NAME: ${self:custom.provider.env.DB_NAME}
    DB_USER: ${self:custom.provider.env.DB_USER}
    DB_PASSWORD: ${self:custom.provider.env.DB_PASSWORD}
    DB_HOST:
      Fn::ImportValue: ${self:custom.provider.env.DB_HOST}
    DB_PORT: ${self:custom.provider.env.DB_PORT}
      # Fn::ImportValue: ${self:custom.provider.env.DB_PORT}
  vpc:
    securityGroupIds:
      - Fn::ImportValue: ${self:custom.provider.vpc.securityGroupIds.LAMBDA_SG}
    subnetIds:
      - Fn::ImportValue: ${self:custom.provider.vpc.subnetIds.SUBNET1}
      - Fn::ImportValue: ${self:custom.provider.vpc.subnetIds.SUBNET2}
      - Fn::ImportValue: ${self:custom.provider.vpc.subnetIds.SUBNET3}

functions:
  getTournamentTree:
    handler: functions/getTournamentTree.getTournamentTree
    events:
      - http:
          path: getTournamentTree/{leagueId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

resources:
  - ${file(../../common/resources/api-gateway-authorizer.yml)}