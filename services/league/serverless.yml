
service: calcutta-league-service

package:
  individually: true

plugins:
  - serverless-bundle

custom:
  stage: ${opt:stage, self:provider.stage}
  profile:
    prod: burke03
    dev: dev

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 15
  logRetentionInDays: 7
  region: us-east-1
  stage: dev
  environment:
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_HOST:
      Fn::ImportValue: calcutta-db-${self:custom.stage}-address
    DB_PORT:
      Fn::ImportValue: calcutta-db-${self:custom.stage}-port
  vpc:
    securityGroupIds:
      - Fn::ImportValue: calcutta-lambdaSG-${self:custom.stage}
    subnetIds:
      - Fn::ImportValue: calcutta-lambda-subnet1-${self:custom.stage}
      - Fn::ImportValue: calcutta-lambda-subnet2-${self:custom.stage}
      - Fn::ImportValue: calcutta-lambda-subnet3-${self:custom.stage}

functions:
  getTournamentOptions:
    handler: functions/getTournamentOptions.getTournamentOptions
    events:
      - http:
          path: getTournamentOptions
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  createLeague:
    handler: functions/createLeague.createLeague
    events:
      - http:
          path: createLeague
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-cognito-token

  joinLeague:
    handler: functions/joinLeague.joinLeague
    events:
      - http:
          path: joinLeague
          method: post
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-cognito-token
  
  getLeagueSummaries:
    handler: functions/getLeagueSummaries.getLeagueSummaries
    events:
      - http:
          path: getLeagueSummaries
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getLeagueUserSummaries:
    handler: functions/getLeagueUserSummaries.getLeagueUserSummaries
    events:
      - http:
          path: getLeagueUserSummaries/{leagueId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getUpcomingGames:
    handler: functions/getUpcomingGames.getUpcomingGames
    events:
      - http:
          path: getUpcomingGames/{leagueId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getRemainingTeamsCount:
    handler: functions/getRemainingTeamsCount.getRemainingTeamsCount
    events:
      - http:
          path: 'getRemainingTeamsCount/{tournamentId}'
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getTournamentGamesForBracket:
    handler: functions/getTournamentGamesForBracket.getTournamentGamesForBracket
    events:
      - http:
          path: getTournamentGamesForBracket/{leagueId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getLeagueUserTeams:
    handler: functions/getLeagueUserTeams.getLeagueUserTeams
    events:
      - http:
          path: getLeagueUserTeams/{leagueId}/{userId}
          method: get
          integration: lambda
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  # updateLeagueSettings:
  #   handler: functions/leagueSettings.updateLeagueSettings
  #   events:
  #     - http:
  #         path: updateLeagueSettings
  #         method: post
  #         integration: lambda
  #         authorizer:
  #           type: COGNITO_USER_POOLS
  #           authorizerId:
  #             Ref: ApiGatewayAuthorizer
  #         cors:
  #           origin: '*'
  #           headers:
  #             - Content-Type
  #             - x-cognito-token

resources:
  - ${file(../../common/resources/api-gateway-authorizer.yml)}