
service: march-madness-calcutta-api

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  secrets: ${file(secrets.json)}
  stage: ${opt:stage, self:provider.stage}
  profile:
    prod: default
    dev: dev
        
provider:
  name: aws
  runtime: nodejs12.x
  timeout: 15
  region: us-east-1
  stage: dev
  profile: ${self:custom.profile.${self:custom.stage}}
  websocketsApiName: calcutta-websockets-api-{self:provider.stage}
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    NODE_ENV: ${self:provider.stage}
    DB_NAME: ${self:custom.secrets.${self:custom.stage}.DB_NAME}
    DB_USER: ${self:custom.secrets.${self:custom.stage}.DB_USER}
    DB_PASSWORD: ${self:custom.secrets.${self:custom.stage}.DB_PASSWORD}
    DB_HOST: ${self:custom.secrets.${self:custom.stage}.DB_HOST}
    DB_PORT: ${self:custom.secrets.${self:custom.stage}.DB_PORT}
    WEBSOCKET_ENDPOINT:
      Fn::Join:
        - ''
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}
  vpc:
    securityGroupIds:
      - ${self:custom.secrets.${self:custom.stage}.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:custom.secrets.${self:custom.stage}.SUBNET1_ID}
      - ${self:custom.secrets.${self:custom.stage}.SUBNET2_ID}
      - ${self:custom.secrets.${self:custom.stage}.SUBNET3_ID}

functions:
  updateLastHeartbeat:
    handler: handler.updateLastHeartbeat
    events:
      - cognitoUserPool:
          pool: ${self:custom.secrets.COGNITO_POOL}
          trigger: PostAuthentication
          existing: true

  addUserAfterSignup:
    handler: auth/signup.addUserAfterSignup
    events:
      - cognitoUserPool:
          pool: ${self:custom.secrets.COGNITO_POOL}
          trigger: PostConfirmation
          existing: true

  getTournamentOptions:
    handler: getTournamentOptions.getTournamentOptions
    events:
      - http:
          path: getTournamentOptions
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  createLeague:
    handler: createLeague.createLeague
    events:
      - http:
          path: createLeague
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-cognito-token

  joinLeague:
    handler: joinLeague.joinLeague
    events:
      - http:
          path: joinLeague
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - Content-Type
              - x-cognito-token

  getLeagueSummaries:
    handler: getLeagueSummaries.getLeagueSummaries
    events:
      - http:
          path: getLeagueSummaries
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getLeagueUserSummaries:
    handler: getLeagueUserSummaries.getLeagueUserSummaries
    events:
      - http:
          path: getLeagueUserSummaries/{leagueId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getUpcomingGames:
    handler: getUpcomingGames.getUpcomingGames
    events:
      - http:
          path: getUpcomingGames/{leagueId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getRemainingGamesCount:
    handler: getRemainingGamesCount.getRemainingGamesCount
    events:
      - http:
          path: 'getRemainingGamesCount/{tournamentId}'
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getLeagueUserTeams:
    handler: getLeagueUserTeams.getLeagueUserTeams
    events:
      - http:
          path: getLeagueUserTeams/{leagueId}/{userId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getAuctionTeams:
    handler: getAuctionTeams.getAuctionTeams
    events:
      - http:
          path: getAuctionTeams/{leagueId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getAuctionMemberBuyIns:
    handler: getAuctionMemberBuyIns.getAuctionMemberBuyIns
    events:
      - http:
          path: getAuctionMemberBuyIns/{leagueId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getAllChatMessages:
    handler: auction/chat.getAllMessages
    events:
      - http:
          path: getAllChatMessages/{leagueId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getAuctionStatus:
    handler: getAuctionStatus.getAuctionStatus
    events:
      - http:
          path: getAuctionStatus/{leagueId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getTournamentGamesForBracket:
    handler: getTournamentGamesForBracket.getTournamentGamesForBracket
    events:
      - http:
          path: getTournamentGamesForBracket/{leagueId}
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  getServerTime:
    handler: getServerTime.getServerTime
    events:
      - http:
          path: getServerTime
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:custom.secrets.USER_POOL_ARN}
            identitySource: method.request.header.x-cognito-token
            claims:
              - sub
          cors:
            origin: '*'
            headers:
              - x-cognito-token

  onConnect:
    handler: auction/websocket.onConnect
    events:
      - websocket:
          route: $connect
  onDisconnect:
    handler: auction/websocket.onDisconnect
    events:
      - websocket:
          route: $disconnect
  handleMessage:
    handler: auction/websocket.handleMessage
    events:
      - websocket:
          route: $default
  resetClock:
    handler: auction/admin.resetClock
    events:
      - websocket:
          route: RESET_CLOCK
  setItemComplete:
    handler: auction/admin.setItemComplete
    events:
      - websocket:
          route: ITEM_COMPLETE
  placeBid:
    handler: auction/admin.placeBid
    events:
      - websocket:
          route: PLACE_BID
  setNextItem:
    handler: auction/admin.setNextItem
    events:
      - websocket:
          route: NEXT_ITEM
  startAuction:
    handler: auction/admin.startAuction
    events:
      - websocket:
          route: START_AUCTION
  closeAuction:
    handler: auction/admin.closeAuction
    events:
      - websocket:
          route: CLOSE_AUCTION


resources:
  - ${file(resources/api-gateway-errors.yml)}